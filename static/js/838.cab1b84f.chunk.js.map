{"version":3,"file":"static/js/838.cab1b84f.chunk.js","mappings":"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,YAAa,4DACbC,YAAa,CACX,gHACA,gKACA,wKAEFY,iBAAkB,q2BA+BlBd,SAAS,GAEX,CACEC,YAAa,2CACbM,aAAc,CACZC,QAAS,CAAC,WAAY,cAAe,WAAY,cACjDE,KAAM,CACJ,CACE,aACA,kHACA,wEACA,yHAEF,CACE,cACA,mDACA,sFACA,qFAEF,CACE,YACA,wEACA,sDACA,0EAEF,CACE,eACA,sFACA,sEACA,iEAEF,CACE,WACA,gEACA,yEACA,+DAOJa,EAAkB,CACtB,CACEtB,YAAa,yBACbC,YAAa,CACX,sEACA,yHACA,6IACA,yGACA,2GAGJ,CACED,YAAa,sBACbC,YAAa,CACX,kGACA,yGACA,yHACA,0FACA,8JACA,4GAEFY,iBAAkB,6qBAiClBd,SAAS,GAEX,CACEC,YAAa,2BACbC,YAAa,CACX,kEACA,uEACA,gIACA,yJAEFY,iBAAkB,ojBAyBlBd,SAAS,GAEX,CACEC,YAAa,mCACbC,YAAa,CACX,mFACA,gFACA,qFACA,4EACA,kFAGJ,CACED,YAAa,uBACbC,YAAa,CACX,2HACA,iJACA,4FAGJ,CACED,YAAa,sDACbM,aAAc,CACZC,QAAS,CAAC,WAAY,mBAAoB,yBAC1CE,KAAM,CACJ,CACE,aACA,gDACA,yCAEF,CACE,oBACA,4CACA,mDAEF,CACE,cACA,mDACA,yCAEF,CACE,cACA,kEACA,mEAEF,CACE,cACA,gCACA,iCAEF,CAAC,UAAW,4BAA6B,6BACzC,CACE,kBACA,iEACA,gEAOJc,EAAa,CACjB,CACEvB,YAAa,WACbC,YAAa,CACX,2IACA,kHACA,2GACA,6MAEFY,iBAAkB,gZAmBpB,CACEb,YAAa,mBACbC,YAAa,CACX,qEACA,+GAEFF,SAAS,GAEX,CACEC,YAAa,yBACbC,YAAa,CACX,sGACA,2GAEFF,SAAS,EACTc,iBAAkB,8TAmBpB,CACEb,YAAa,mBACbC,YAAa,CACX,gHACA,wEAEFF,SAAS,EACTc,iBAAkB,wJASpB,CACEb,YACE,wEACFC,YAAa,CACX,+HACA,wFACA,mGACA,wEAEFF,SAAS,EACTc,iBAAkB,uQAgBpB,CACEb,YAAa,gCACbC,YAAa,CACX,qHACA,qFAEFF,SAAS,EACTc,iBAAkB,2OAiBpB,CACEb,YAAa,+BACbC,YAAa,CACX,iFACA,4GACA,kFACA,gEAEFY,iBAAkB,yRAepB,CACEb,YACE,gEACFC,YAAa,CACX,6EACA,8GACA,uHAEFY,iBAAkB,maAsBpB,CACEb,YAAa,8CACbC,YAAa,CACX,iIACA,iHACA,oGAEFY,iBAAkB,gbAqBpB,CACEb,YAAa,6DACbC,YAAa,CACX,6IACA,+IACA,uIAEFY,iBAAkB,yFAIpB,CACEb,YAAa,2CACbC,YAAa,CACX,0GACA,4FACA,iHACA,8GAGJ,CACED,YAAa,oCACbC,YAAa,CACX,+HACA,gHACA,oHACA,wFACA,2FACA,wFAEFY,iBAAkB,ugBAmBpB,CACEb,YAAa,0BACbC,YAAa,CACX,4HACA,wIACA,+GACA,4GACA,gFACA,2FACA,gIAEFY,iBAAkB,0XAuBpB,CACEb,YAAa,uCACbC,YAAa,CACX,sGACA,2HACA,kIACA,6FAEFY,iBAAkB,iOAahBW,EAAoB,CACxB,CACExB,YAAa,6BACbC,YAAa,CACX,sIACA,uIACA,uFACA,+GACA,qKAEFY,iBAAkB,qKAUpB,CACEb,YAAa,uDACbC,YAAa,CACX,kFACA,oFACA,mGACA,kJACA,6LAEFF,SAAS,GAEX,CACEC,YAAa,6BACbC,YAAa,CACX,gGACA,wGACA,iHACA,4GACA,mHAEFF,SAAS,GAEX,CACEC,YAAa,6BACbC,YAAa,CACX,sHACA,iGACA,uGACA,uEACA,8GACA,iHAEFY,iBAAkB,+JAQpB,CACEb,YAAa,2BACbC,YAAa,CACX,qFACA,iFACA,uFACA,0GAEFF,SAAS,GAEX,CACEC,YAAa,iCACbC,YAAa,CACX,0KACA,2DACA,kHAEFF,SAAS,EACTc,iBAAkB,uRAcpB,CACEb,YAAa,+BACbC,YAAa,CACX,+IACA,4IACA,mGACA,+HACA,sHACA,+IACA,QAGJ,CACED,YAAa,oCACbC,YAAa,CACX,mGACA,gIACA,qJACA,0GAEFY,iBAAkB,ohB,kGCtsBP,SAASc,EAAa5E,GACn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","sources":["components/Common/CommonButton.js","../node_modules/@mui/icons-material/esm/ArrowBack.js","components/Common/ContentRenderer.js","components/React/CoreReact/CoreReact.js","components/React/CoreReact/CoreReactConceptsData.js","../node_modules/@mui/system/esm/styleFunctionSx/extendSxProp.js","../node_modules/@mui/material/Box/boxClasses.js","../node_modules/@mui/material/Box/Box.js","../node_modules/@mui/system/esm/createBox/createBox.js","../node_modules/@mui/material/SvgIcon/svgIconClasses.js","../node_modules/@mui/material/SvgIcon/SvgIcon.js","../node_modules/@mui/material/utils/createSvgIcon.js","../node_modules/@mui/system/esm/useThemeWithoutDefault/useThemeWithoutDefault.js","../node_modules/@mui/system/esm/useTheme/useTheme.js"],"sourcesContent":["import React from \"react\";\r\nimport Button from \"@mui/material/Button\";\r\n\r\nconst CommonButton = (props) => {\r\n  const { handleClick, styles, children, disabled } = props;\r\n  return (\r\n    <Button\r\n      sx={{\r\n        background: \"transparent\",\r\n        border: \"1px solid #880E4F\",\r\n        color: \"#880E4F\",\r\n        textTransform: \"none\",\r\n        fontWeight: \"600\",\r\n        ...styles,\r\n        \"&:disabled\": {\r\n          opacity: 0.4,\r\n          border: \"1px solid grey\",\r\n          color: \"grey\",\r\n        },\r\n      }}\r\n      onClick={handleClick}\r\n      disabled={disabled}\r\n    >\r\n      {children}\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport default CommonButton;\r\n","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20z\"\n}), 'ArrowBack');","import React, { useState } from \"react\";\r\nimport { Box } from \"@mui/material\";\r\nimport { ArrowBack } from \"@mui/icons-material\";\r\nimport CommonButton from \"./CommonButton\";\r\n\r\n/**\r\n * ContentRenderer component renders the main topic and its subtopics.\r\n * It allows navigation between different subtopics and displays detailed content for each subtopic.\r\n *\r\n */\r\nconst ContentRenderer = ({ conceptData }) => {\r\n  const { topic, subTopics } = conceptData;\r\n\r\n  const [displayContentIndex, setDisplayContentIndex] = useState(null);\r\n\r\n  const handleDisplayContent = (index) => {\r\n    setDisplayContentIndex(index + 1);\r\n  };\r\n\r\n  const handleBack = () => {\r\n    setDisplayContentIndex(null);\r\n  };\r\n\r\n  const handleNext = () => {\r\n    window.scrollTo(0, 0, \"smooth\");\r\n    setDisplayContentIndex(displayContentIndex + 1);\r\n  };\r\n\r\n  const handlePrevious = () => {\r\n    window.scrollTo(0, 0, \"smooth\");\r\n    setDisplayContentIndex(displayContentIndex - 1);\r\n  };\r\n\r\n  const renderSubContent = () => {\r\n    const { topicName, detailedList } = subTopics?.[displayContentIndex - 1];\r\n    return (\r\n      <>\r\n        <Box sx={{ display: \"flex\", alignItems: \"center\" }}>\r\n          <ArrowBack\r\n            onClick={handleBack}\r\n            sx={{ mr: \"10px\", cursor: \"pointer\" }}\r\n          />\r\n          <h2 className=\"text_color_1 no_margin\">{topicName}</h2>\r\n        </Box>\r\n        {detailedList?.map((content, index) => (\r\n          <Box key={index} sx={{ pl: content.padLeft ? 4 : 0 }}>\r\n            <h2>{content.contentName}</h2>\r\n            {content?.contentList && (\r\n              <ul className=\"list_style_content\">\r\n                {content?.contentList?.map((item, ind) => (\r\n                  <li\r\n                    dangerouslySetInnerHTML={{ __html: item }}\r\n                    key={`${content.contentName}_${ind}`}\r\n                  />\r\n                ))}\r\n              </ul>\r\n            )}\r\n            {content?.contentTable && (\r\n              <Box className=\"scrollbar_auto_styles\">\r\n                <table>\r\n                  <thead>\r\n                    <tr>\r\n                      {content?.contentTable?.headers.map((header, ind) => (\r\n                        <th key={`${content.contentName}_${ind}`}>{header}</th>\r\n                      ))}\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {content?.contentTable?.rows.map((row, ind) => (\r\n                      <tr key={`${content.contentName}_${ind}`}>\r\n                        {row.map((cell, i) => (\r\n                          <td key={`${content.contentName}_${ind}_${i}`}>\r\n                            {cell}\r\n                          </td>\r\n                        ))}\r\n                      </tr>\r\n                    ))}\r\n                  </tbody>\r\n                </table>\r\n              </Box>\r\n            )}\r\n            {content.contentCodeBlock && (\r\n              <pre>\r\n                <code>{content.contentCodeBlock}</code>\r\n              </pre>\r\n            )}\r\n          </Box>\r\n        ))}\r\n        <Box\r\n          sx={{\r\n            mt: \"20px\",\r\n            display: \"flex\",\r\n            justifyContent: \"flex-end\",\r\n            gap: \"10px\",\r\n          }}\r\n        >\r\n          <CommonButton\r\n            handleClick={handlePrevious}\r\n            disabled={displayContentIndex === 1}\r\n          >\r\n            ⯇ Previous\r\n          </CommonButton>\r\n          <CommonButton\r\n            handleClick={handleNext}\r\n            disabled={displayContentIndex === subTopics?.length}\r\n          >\r\n            Next ⯈\r\n          </CommonButton>\r\n        </Box>\r\n      </>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h1>{topic}</h1>\r\n      {displayContentIndex ? (\r\n        renderSubContent()\r\n      ) : (\r\n        <ol className=\"list_heading\">\r\n          {conceptData?.subTopics.map((content, index) => (\r\n            <li key={index} onClick={() => handleDisplayContent(index)}>\r\n              {content?.topicName}\r\n            </li>\r\n          ))}\r\n        </ol>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContentRenderer;\r\n","import React from \"react\";\r\nimport ContentRenderer from \"../../Common/ContentRenderer\";\r\nimport {reactConcepts, reactComponents, reactProps, reactListsAndKeys}  from \"./CoreReactConceptsData\";\r\n\r\nconst reactCoreList = {\r\n  topic: \"Core React\",\r\n  subTopics: [\r\n    {\r\n      topicName: \"React, JSX, Virtual DOM vs Real DOM, Reconciliation\",\r\n      detailedList: reactConcepts,\r\n    },\r\n    {\r\n      topicName: \"Components in React, Class and Functional Components\",\r\n      detailedList: reactComponents,\r\n    },\r\n    {\r\n      topicName: \"Props, props drilling, HOCs, Render Props\",\r\n      detailedList: reactProps,\r\n    },\r\n    {\r\n      topicName: \"Lists and Keys, Event Handling and Conditional Rendering\",\r\n      detailedList: reactListsAndKeys,\r\n    }\r\n  ],\r\n};\r\n\r\nconst CoreReact = () => {\r\n  return <ContentRenderer conceptData={reactCoreList} />;\r\n};\r\n\r\nexport default CoreReact;\r\n","const reactConcepts = [\r\n  {\r\n    contentName: \"1. React\",\r\n    contentList: [\r\n      `It is a JavaScript library for building fast, interactive, and scalable user interfaces (UI), primarily for web applications.`,\r\n      `It is declarative, efficient, and flexible.`,\r\n      `It is component-based, meaning the UI is split into independent, reusable pieces.`,\r\n    ],\r\n  },\r\n  {\r\n    contentName: \"a. Advantages\",\r\n    contentList: [\r\n      `<span class=\"semibold_italic\">Component-Based Architecture →</span> Reusable components make development faster and code more maintainable.`,\r\n      `<span class=\"semibold_italic\">Fast Rendering with Virtual DOM →</span> React updates only the necessary parts of the UI, improving performance.`,\r\n      `<span class=\"semibold_italic\">Unidirectional Data Flow →</span> Ensures predictable state management, reducing bugs and making debugging easier.`,\r\n      `<span class=\"semibold_italic\">Rich Ecosystem & Community Support →</span> Huge open-source support with libraries like Redux, React Query, and Material UI.`,\r\n      `<span class=\"semibold_italic\">Easy to Learn & Use →</span> JSX simplifies UI development, making React beginner-friendly.`,\r\n      `<span class=\"semibold_italic\">Cross-Platform Development →</span> React Native allows code reuse for mobile apps (iOS & Android).`,\r\n    ],\r\n    padLeft: true,\r\n  },\r\n  {\r\n    contentName: \"b. Limitations\",\r\n    contentList: [\r\n      `<span class=\"semibold_italic\">Not a Full Framework:</span> Only handles UI, needs React Router for navigation, Redux/Context API for state, API handling etc.`,\r\n      `<span class=\"semibold_italic\">SEO Issues:</span> React uses client-side rendering, which can hurt SEO. Solution: Use Next.js for SSR.`,\r\n      `<span class=\"semibold_italic\">Frequent Updates:</span> React evolves quickly (e.g., Class Components → Hooks), requiring constant learning.`,\r\n      `<span class=\"semibold_italic\">Prop Drilling & Complex State:</span> Passing data deep in components is painful; needs Context API, Redux, or Zustand.`,\r\n      `<span class=\"semibold_italic\">Not Ideal for Small/Static Apps:</span> Lightweight alternatives like Svelte, Vue, or Astro are better in some cases.`,\r\n    ],\r\n    padLeft: true,\r\n  },\r\n  {\r\n    contentName: \"2. JSX (JavaScript XML)\",\r\n    contentList: [\r\n      `It is a syntax extension for JavaScript, similar to XML/HTML, used with React to describe UI components.`,\r\n      `It allows writing HTML in React and JavaScript code in the same file.`,\r\n      `It is not a necessity but a convention for writing React components.`,\r\n    ],\r\n  },\r\n  {\r\n    contentName: \"a. Advantages\",\r\n    contentList: [\r\n      `<span class=\"semibold_italic\">Easy to Write & Read:</span> Combines HTML & JS, making code more readable and maintainable.`,\r\n      `<span class=\"semibold_italic\">Prevents Injection Attacks:</span> Automatically escapes user inputs, preventing XSS attacks.`,\r\n      `<span class=\"semibold_italic\">Faster Development:</span> Reduces context switching between HTML and JS, improving productivity.`,\r\n    ],\r\n    padLeft: true,\r\n  },\r\n  {\r\n    contentName: \"b. How JSX works?\",\r\n    contentList: [\r\n      `JSX is transpiled to JavaScript using Babel, converting HTML-like syntax to React.createElement() calls.`,\r\n      `React.createElement() creates a virtual DOM object (React Element) for each JSX tag.`,\r\n      `React then updates the actual DOM based on the virtual DOM changes.`,\r\n    ],\r\n    padLeft: true,\r\n  },\r\n  {\r\n    contentName: \"3. Virtual DOM\",\r\n    contentList: [\r\n      `It is a lightweight copy of the actual DOM, used by React to improve performance.`,\r\n      `React compares the virtual DOM with the actual DOM and updates only the changed parts.`,\r\n      `It reduces the number of DOM manipulations, improving rendering speed.`,\r\n    ],\r\n  },\r\n  {\r\n    contentName: \"4. Reconciliation Process\",\r\n    contentList: [\r\n      `It is is the process React uses to update the Real DOM efficiently when the state or props of a component change. Instead of re-rendering the entire UI, React compares the new Virtual DOM with the previous one and updates only the changed parts in the actual DOM.`,\r\n    ],\r\n  },\r\n  {\r\n    contentName: \"a. How Virtual DOM Updates work? (Reconciliation Process)\",\r\n    contentList: [\r\n      `<span class=\"semibold_italic\">Render Phase:</span> When the UI changes, React creates a new virtual DOM tree.`,\r\n      `<span class=\"semibold_italic\">Diffing Phase:</span> React compares the new virtual DOM with the previous one using the diffing algorithm to find the changes.`,\r\n      `<span class=\"semibold_italic\">Reconciliation Phase:</span> Instead of updating the actual DOM directly, React updates only the changed parts, improving performance.`,\r\n    ],\r\n    contentCodeBlock: `function TextUpdater() {\r\n  const [text, setText] = useState(\"Hello, world!\");\r\n\r\n  const updateText = () => {\r\n    setText(\"Hello, React!\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <p>{text}</p>\r\n      <button onClick={updateText}>Change Text</button>\r\n    </div>\r\n  );\r\n}\r\n\r\n/*\r\n  How This Works (Step-by-Step)\r\n\r\n  1. Initial Render:\r\n     - React creates a Virtual DOM for the component with <p>Hello, world!</p>.\r\n\r\n  2. State Update (onClick Event):\r\n     - The button is clicked, updating the state to \"Hello, React!\".\r\n     - A new Virtual DOM tree is created with <p>Hello, React!</p>.\r\n\r\n  3. Diffing (Comparing Old vs. New Virtual DOM):\r\n     - React detects that only the text inside <p> has changed.\r\n\r\n  4. Reconciliation (Efficient Update to Real DOM):\r\n     - Instead of re-rendering the entire <p> element, React updates only the text node inside.\r\n*/`,\r\n    padLeft: true,\r\n  },\r\n  {\r\n    contentName: \"5. Difference with Real DOM & Shadow DOM\",\r\n    contentTable: {\r\n      headers: [\"Features\", \"Virtual DOM\", \"Real DOM\", \"Shadow DOM\"],\r\n      rows: [\r\n        [\r\n          \"Definition\",\r\n          \"A lightweight copy of the Real DOM used by React to track the changes efficiently before updating the Real DOM.\",\r\n          \"The actual browser-rendered HTML structure that users interact with. \",\r\n          \"A separate, encapsulated DOM inside an element (mostly used in Web Components) to prevent style and script conflicts.\",\r\n        ],\r\n        [\r\n          \"Performance\",\r\n          \"Faster updates due to minimal DOM manipulations.\",\r\n          \"Slower updates as it directly interacts with the browser and whole repaints happen.\",\r\n          \"Improves performance by keeping styles and elements scoped to a single component.\",\r\n        ],\r\n        [\r\n          \"Rendering\",\r\n          \"Creates a virtual tree of React elements that mirrors the actual DOM.\",\r\n          \"Directly renders the HTML structure on the browser.\",\r\n          \"Renders the DOM inside a shadow root, isolated from the main document.\",\r\n        ],\r\n        [\r\n          \"Manipulation\",\r\n          \"React compares old and new VDOM, updating only the necessary parts in the Real DOM.\",\r\n          \"Any change directly affects the page, causing a reflow and repaint.\",\r\n          \"Elements inside a Shadow DOM are independent of the main DOM.\",\r\n        ],\r\n        [\r\n          \"Use Case\",\r\n          \"React uses VDOM to improve performance and reduce re-renders.\",\r\n          \"Traditional websites and applications that don’t use a framework.\",\r\n          \"Web Components that need encapsulation and reusability.\",\r\n        ],\r\n      ],\r\n    },\r\n  },\r\n];\r\n\r\nconst reactComponents = [\r\n  {\r\n    contentName: \"1. Components in React\",\r\n    contentList: [\r\n      `In React, components are the building blocks of the user interface.`,\r\n      `They’re essentially reusable, independent pieces of code that define how a part of the UI should look and behave.`,\r\n      `Think of them like Lego bricks—you can create small pieces like a button or a card and then combine them to build complex interfaces.`,\r\n      `Each component can manage its own state, receive data through props, and render UI based on that data.`,\r\n      `In React, components can be created in two different ways: Class Components and Functional Components.`,\r\n    ],\r\n  },\r\n  {\r\n    contentName: \"a. Class Components\",\r\n    contentList: [\r\n      `Class components are ES6 classes that extend from React.Component and can hold their own state.`,\r\n      `They have a render() method that returns the component’s UI based on the current state and props.`,\r\n      `Class components can also have lifecycle methods like componentDidMount, componentDidUpdate, and componentWillUnmount.`,\r\n      `Before React 16.8, class components were the primary way to create components in React.`,\r\n      `After the introduction of Hooks in React 16.8, functional components became the preferred way to create components due to their simplicity and reusability.`,\r\n      `Now functional components can also use state and lifecycle methods, making class components less common.`,\r\n    ],\r\n    contentCodeBlock: `import React, { Component } from \"react\";\r\n\r\nclass Counter extends Component {\r\n  state = {\r\n    count: 0,\r\n  };\r\n\r\n  increment = () => {\r\n    this.setState({ count: this.state.count + 1 });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <p>Count: {this.state.count}</p>\r\n        <button onClick={this.increment}>Increment</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Counter;\r\n\r\n/*\r\n  How This Works\r\n\r\n  1. Initial Render:\r\n     - The component renders with count: 0 and a button to increment.\r\n\r\n  2. State Update (onClick Event):\r\n     - The button is clicked, updating the state to count: 1.\r\n     - React re-renders the component with the new state.\r\n*/`,\r\n    padLeft: true,\r\n  },\r\n  {\r\n    contentName: \"b. Functional Components\",\r\n    contentList: [\r\n      `Functional components are JavaScript functions that return JSX.`,\r\n      `They are simpler, shorter, and easier to read than class components.`,\r\n      `In traditional functional components, you couldn’t use state or lifecycle methods, making them limited in functionality.`,\r\n      `With the introduction of Hooks in React 16.8, functional components can now use state and lifecycle methods, making them more powerful and versatile.`,\r\n    ],\r\n    contentCodeBlock: `import React, { useState } from \"react\";\r\n\r\nfunction Counter() {\r\n  const [count, setCount] = useState(0);\r\n\r\n  return (\r\n    <div>\r\n      <p>Count: {count}</p>\r\n      <button onClick={() => setCount(count + 1)}>Increment</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Counter;\r\n\r\n/*\r\n  How This Works\r\n\r\n  1. Initial Render:\r\n     - The component renders with count: 0 and a button to increment.\r\n\r\n  2. State Update (onClick Event):\r\n     - The button is clicked, updating the state to count: 1.\r\n     - React re-renders the component with the new state.\r\n*/`,\r\n    padLeft: true,\r\n  },\r\n  {\r\n    contentName: \"2. Why not use Class Components?\",\r\n    contentList: [\r\n      `Class components are more verbose and harder to read than functional components.`,\r\n      `They require more boilerplate code, making them slower to write and maintain.`,\r\n      `Class components don’t optimize performance as well as functional components.`,\r\n      `Functional components are easier to test and debug than class components.`,\r\n      `Functional components are more reusable and composable than class components.`,\r\n    ],\r\n  },\r\n  {\r\n    contentName: \"3. When to use what?\",\r\n    contentList: [\r\n      `If you’re starting a new project, use functional components with Hooks for better code quality and maintainability.`,\r\n      `If you're working on legacy code or a project that uses class components, continue using them until you can refactor to functional components.`,\r\n      `Functional components are the future of React and are recommended for all new projects.`,\r\n    ],\r\n  },\r\n  {\r\n    contentName: \"4. Difference between Class & Functional Components\",\r\n    contentTable: {\r\n      headers: [\"Features\", \"Class Components\", \"Functional Components\"],\r\n      rows: [\r\n        [\r\n          \"Definition\",\r\n          \"ES6 classes that extend from React.Component.\",\r\n          \"JavaScript functions that return JSX.\",\r\n        ],\r\n        [\r\n          \"State & Lifecycle\",\r\n          \"Can hold state and use lifecycle methods.\",\r\n          \"Can use state and lifecycle methods with Hooks.\",\r\n        ],\r\n        [\r\n          \"Code Length\",\r\n          \"More verbose and requires more boilerplate code.\",\r\n          \"Shorter, simpler, and easier to read.\",\r\n        ],\r\n        [\r\n          \"Performance\",\r\n          \"Slower performance due to class bindings and lifecycle methods.\",\r\n          \"Faster performance due to fewer bindings and lifecycle methods.\",\r\n        ],\r\n        [\r\n          \"Reusability\",\r\n          \"Less reusable and composable.\",\r\n          \"More reusable and composable.\",\r\n        ],\r\n        [\"Testing\", \"Harder to test and debug.\", \"Easier to test and debug.\"],\r\n        [\r\n          \"Recommended Use\",\r\n          \"Use for legacy code or projects that require class components.\",\r\n          \"Use for new projects or projects that can be refactored.\",\r\n        ],\r\n      ],\r\n    },\r\n  },\r\n];\r\n\r\nconst reactProps = [\r\n  {\r\n    contentName: \"1. Props\",\r\n    contentList: [\r\n      `Props (short for properties) are read-only inputs passed from a parent component to a child component (similar like function arguments).`,\r\n      `They allow components to be reusable and dynamic by sending data like strings, numbers, objects, and functions.`,\r\n      `Props define how the child components should render based on the data passed from the parent components.`,\r\n      `Props are immutable because React follows a unidirectional data flow (one-way binding). The parent controls the data, and the child cannot modify it, ensuring better predictability and maintainability.`,\r\n    ],\r\n    contentCodeBlock: `function ChildComponent({ name, age }) {\r\n  return (\r\n    <>\r\n      <p>Name: {name}</p>\r\n      <p>Age: {age}</p>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction ParentComponent() {\r\n  return <ChildComponent name=\"John Doe\" age={30} />;\r\n}\r\n\r\n/*\r\n  How This Works\r\n  1. ParentComponent: Passes the props 'name' and 'age' to ChildComponent.\r\n  2. ChildComponent: Receives the props and renders them in the JSX.\r\n*/`,\r\n  },\r\n  {\r\n    contentName: \"a. Passing Props\",\r\n    contentList: [\r\n      `Props are passed from parent to child components using attributes.`,\r\n      `Props are passed as key-value pairs, where the key is the prop name and the value is the data to be passed.`,\r\n    ],\r\n    padLeft: true,\r\n  },\r\n  {\r\n    contentName: \"b. Destructuring Props\",\r\n    contentList: [\r\n      `Props can be destructured inside the child component to access the individual prop values directly.`,\r\n      `Destructuring makes the code cleaner and more readable by extracting the props into separate variables.`,\r\n    ],\r\n    padLeft: true,\r\n    contentCodeBlock: `// Without Destructuring\r\nfunction ChildComponent(props) {\r\n  return (\r\n    <>\r\n      <p>Name: {props.name}</p>\r\n      <p>Age: {props.age}</p>\r\n    </>\r\n  );\r\n\r\n// With Destructuring\r\nfunction ChildComponent({ name, age }) {\r\n  return (\r\n    <>\r\n      <p>Name: {name}</p>\r\n      <p>Age: {age}</p>\r\n    </>\r\n  );\r\n}`,\r\n  },\r\n  {\r\n    contentName: \"c. Default Props\",\r\n    contentList: [\r\n      `Default props are used to set default values for props in case they are not passed from the parent component.`,\r\n      `They help in handling undefined props gracefully and prevent errors.`,\r\n    ],\r\n    padLeft: true,\r\n    contentCodeBlock: `function ChildComponent({ name = \"Anonymous\", age = 0 }) {\r\n  return (\r\n    <>\r\n      <p>Name: {name}</p>\r\n      <p>Age: {age}</p>\r\n    </>\r\n  );\r\n}`,\r\n  },\r\n  {\r\n    contentName:\r\n      \"d. Children Props (Passing Components as Props: Render Props Pattern)\",\r\n    contentList: [\r\n      `The children prop is a special prop that allows passing JSX elements or text or Components as children to another component.`,\r\n      `It is useful for creating reusable components that wrap other components or elements.`,\r\n      `The children prop can be used to create higher-order components (HOCs) or render props patterns.`,\r\n      `It is commonly used for components like modals, tooltips, and cards.`,\r\n    ],\r\n    padLeft: true,\r\n    contentCodeBlock: `function Card({ title, children }) {\r\n  return (\r\n    <div>\r\n      <h2>{title}</h2>\r\n      <div>{children}</div>\r\n    </div>\r\n  );\r\n\r\nfunction App() {\r\n  return (\r\n    <Card title=\"My Card\">\r\n      <p>This is the content of the card.</p>\r\n    </Card>\r\n  );\r\n}`,\r\n  },\r\n  {\r\n    contentName: \"e. Spread Operator with Props\",\r\n    contentList: [\r\n      `The spread operator (...) can be used to pass multiple props to a component without explicitly defining each prop.`,\r\n      `It helps in passing all the props of an object or component to another component.`,\r\n    ],\r\n    padLeft: true,\r\n    contentCodeBlock: `const user = {\r\n  name: \"John Doe\",\r\n  age: 30,\r\n};\r\n\r\nfunction Profile({ name, age }) {\r\n  return (\r\n    <>\r\n      <p>Name: {name}</p>\r\n      <p>Age: {age}</p>\r\n    </>\r\n  );\r\n\r\nfunction App() {\r\n  return <Profile {...user} />;\r\n}`,\r\n  },\r\n  {\r\n    contentName: \"2. Prop Types and Validation\",\r\n    contentList: [\r\n      `PropTypes is a library used for type-checking the props passed to a component.`,\r\n      `It helps in validating the props passed from the parent component to ensure they are of the correct type.`,\r\n      `Common PropTypes include string, number, boolean, array, object, function, etc.`,\r\n      `PropTypes are defined as static properties on the component.`,\r\n    ],\r\n    contentCodeBlock: `import PropTypes from \"prop-types\";\r\n\r\nfunction ChildComponent({ name, age }) {\r\n  return (\r\n    <>\r\n      <p>Name: {name}</p>\r\n      <p>Age: {age}</p>\r\n    </>\r\n  );\r\n\r\nChildComponent.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  age: PropTypes.number.isRequired,\r\n};`,\r\n  },\r\n  {\r\n    contentName:\r\n      \"3. How to Update Props? (trigger events from child to parent)\",\r\n    contentList: [\r\n      `Props are immutable and cannot be changed directly by the child component.`,\r\n      `To update props, you can pass callback functions as props from the parent component to the child component.`,\r\n      `The child component can call the callback function to trigger an event in the parent component, updating the props.`,\r\n    ],\r\n    contentCodeBlock: `function ParentComponent() {\r\n  const [name, setName] = useState(\"John Doe\");\r\n\r\n  const updateName = () => {\r\n    setName(\"David Smith\");\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <ChildComponent name={name} updateName={updateName} />\r\n    </>\r\n  );\r\n\r\nfunction ChildComponent({ name, updateName }) {\r\n  return (\r\n    <>\r\n      <p>Name: {name}</p>\r\n      <button onClick={updateName}>Update Name</button>\r\n    </>\r\n  );\r\n}`,\r\n  },\r\n  {\r\n    contentName: \"4. What is props drilling? How to avoid it?\",\r\n    contentList: [\r\n      `Props drilling is the process of passing props through multiple levels of components to reach a deeply nested child component.`,\r\n      `It can make the code harder to maintain and debug, as props have to be passed through intermediary components.`,\r\n      `To avoid props drilling, use React Context API or state management libraries like Redux or MobX.`,\r\n    ],\r\n    contentCodeBlock: `// Using Context API\r\nconst UserContext = React.createContext();\r\n\r\nfunction ParentComponent() {\r\n  const user = { name: \"John Doe\", age: 30 };\r\n\r\n  return (\r\n    <UserContext.Provider value={user}>\r\n      <ChildComponent />\r\n    </UserContext.Provider>\r\n  );\r\n\r\nfunction ChildComponent() {\r\n  const user = useContext(UserContext);\r\n  return (\r\n    <>\r\n      <p>Name: {user.name}</p>\r\n      <p>Age: {user.age}</p>\r\n    </>\r\n  );`,\r\n  },\r\n  {\r\n    contentName: \"5. How do you prevent unnecessary re-renders due to props?\",\r\n    contentList: [\r\n      `To prevent unnecessary re-renders due to props changes, use React.memo() for functional components and PureComponent for class components.`,\r\n      `React.memo() is a higher-order component that memoizes the component based on its props, preventing re-renders if the props haven't changed.`,\r\n      `PureComponent is a class component that does a shallow comparison of props and state to prevent re-renders if they haven't changed.`,\r\n    ],\r\n    contentCodeBlock: `const ChildComponent = React.memo(({ name }) => {\r\n  return <p>Name: {name}</p>;\r\n});`,\r\n  },\r\n  {\r\n    contentName: \"6. How to handle dynamic props in React?\",\r\n    contentList: [\r\n      `To handle dynamic props in React, you can use JavaScript expressions to pass props based on conditions.`,\r\n      `You can also use the spread operator (...) to pass multiple dynamic props to a component.`,\r\n      `Dynamic props help in creating reusable components that can render different content based on the data passed.`,\r\n      `Example: A profile component that renders different user profiles based on the user data passed as props.`,\r\n    ],\r\n  },\r\n  {\r\n    contentName: \"7. Higher-Order Components (HOCs)\",\r\n    contentList: [\r\n      `Higher-Order Components (HOCs) are functions that take a component and return a new component with additional functionality.`,\r\n      `They are used to share code between components, add new props, or modify the behavior of existing components.`,\r\n      `HOCs are a common pattern in React for code reuse, logic abstraction, and enhancing components with new features.`,\r\n      `They allow adding common functionality to multiple components without repeating code.`,\r\n      `HOCs are a flexible and powerful pattern for enhancing components in React applications.`,\r\n      `Example: A withLoading HOC that shows a loading spinner while data is being fetched.`,\r\n    ],\r\n    contentCodeBlock: `function withLoading(Component) {\r\n  return function WithLoadingComponent({ isLoading, ...props }) {\r\n    if (isLoading) return <Spinner />;\r\n    return <Component {...props} />;\r\n  \r\n  function Profile({ user }) {\r\n  return (\r\n    <div>\r\n      <h2>{user.name}</h2>\r\n      <p>{user.bio}</p>\r\n    </div>;\r\n  \r\n  const ProfileWithLoading = withLoading(Profile);\r\n  \r\n  function App() {\r\n    const isLoading = true; // Simulating loading state\r\n    return <ProfileWithLoading user={user} isLoading={isLoading} />;\r\n  }`,\r\n  },\r\n  {\r\n    contentName: \"8. Render Props Pattern\",\r\n    contentList: [\r\n      `The Render Props pattern is a technique for sharing code between React components using a prop whose value is a function.`,\r\n      `It allows components to share logic and data with other components by passing a function as a child prop without repeating the logic.`,\r\n      `The child component can then call the function to access the shared logic or data from the parent component.`,\r\n      `The Render Props pattern is commonly used for code reuse and component composition in React applications.`,\r\n      `It provides a flexible way to pass data and functionality between components.`,\r\n      `They help in separating concerns and keeping components focused on their specific tasks.`,\r\n      `Example: One component that fetches data and another component that renders the fetched data using the Render Props pattern.`,\r\n    ],\r\n    contentCodeBlock: `function DataFetcher({ render }) {\r\n  const data = fetchData(); // Fetch data from API\r\n  return render(data);\r\n}\r\n\r\nfunction Profile({ user }) {\r\n  return (\r\n    <div>\r\n      <h2>{user.name}</h2>\r\n      <p>{user.bio}</p>\r\n    </div>;\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <DataFetcher\r\n      render={(data) => (\r\n        <Profile user={data} />\r\n      )}\r\n    />\r\n  );\r\n}`,\r\n  },\r\n  {\r\n    contentName: \"9. When to use HOCS vs Render Props?\",\r\n    contentList: [\r\n      `Use Higher-Order Components (HOCs) when you need to share common logic between multiple components.`,\r\n      `Use Render Props when you need to share data or functionality between components using a prop whose value is a function.`,\r\n      `HOCs are useful for code reuse and logic abstraction, while Render Props are useful for data sharing and component composition.`,\r\n      `Both patterns are powerful and flexible ways to enhance components in React applications.`,\r\n    ],\r\n    contentCodeBlock: `// Example: Use HOCs for sharing common logic\r\nconst ProfileWithLoading = withLoading(Profile);\r\n\r\n// Example: Use Render Props for sharing data\r\n<DataFetcher\r\n  render={(data) => (\r\n    <Profile user={data} />\r\n  )}\r\n/>`,\r\n  },\r\n];\r\n\r\n/* Lists and Keys in React, Event Handling, Conditional Rendering */\r\nconst reactListsAndKeys = [\r\n  {\r\n    contentName: \"1. Lists and Keys in React\",\r\n    contentList: [\r\n      `Lists ares used in React to render multiple elements dynamically based on an array of data. (Ex: users, cart items, products, etc.)`,\r\n      `A key is an unique identifier assigned to each element in a list to help React identify which items have changed, added, or removed.`,\r\n      `Keys help React optimize rendering by reducing re-renders and improving performance.`,\r\n      `Keys should be unique, stable, and consistent across renders to ensure proper reconciliation and avoid bugs.`,\r\n      `If keys are not unique or not provided, React may re-render all the items, causing performance issues. (such as flickering, data loss, inefficient updates, etc.)`,\r\n    ],\r\n    contentCodeBlock: `function ListComponent({ items }) {\r\n  return (\r\n    <ul>\r\n      {items.map((item) => (\r\n        <li key={item.id}>{item.name}</li>\r\n      )}\r\n    </ul>\r\n  );\r\n}`,\r\n  },\r\n  {\r\n    contentName: \"a. Why use Keys? How they work while updating lists?\",\r\n    contentList: [\r\n      `Keys help React identify which items have changed, added, or removed in a list.`,\r\n      `They improve rendering performance by reducing re-renders and optimizing updates.`,\r\n      `Keys are essential for efficient list rendering and proper reconciliation in React applications.`,\r\n      `When an item is added, removed, or reordered in a list, React uses keys to determine the changes and update only the necessary parts of the UI.`,\r\n      `For example, when a new item is added to a list, React compares the keys of the new list with the old list to identify the added item and render it without re-rendering the entire list.`,\r\n    ],\r\n    padLeft: true,\r\n  },\r\n  {\r\n    contentName: \"b. Best Practices for Keys\",\r\n    contentList: [\r\n      `Keys should be unique, stable, and consistent across renders to ensure proper reconciliation.`,\r\n      `Use string or number keys for better performance and predictability. (like database IDs, UUIDs, etc.)`,\r\n      `For dynamic lists don't use index as keys, as it can cause issues when items are added, removed, or reordered.`,\r\n      `Keys should be assigned to the top-level element inside the map function to ensure proper reconciliation.`,\r\n      `If the list items have unique IDs, use them as keys. Otherwise, generate unique keys using libraries like uuid.`,\r\n    ],\r\n    padLeft: true,\r\n  },\r\n  {\r\n    contentName: \"2. Event Handling in React\",\r\n    contentList: [\r\n      `Event handling in React is how the UI responds to user interactions like clicks, keypresses, form submissions, etc.`,\r\n      `Event handling in React is similar to handling events in HTML, but with camelCase event names.`,\r\n      `Events are passed as functions (event handlers) to JSX elements and triggered when the event occurs.`,\r\n      `Common events include onClick, onChange, onSubmit, onMouseOver, etc.`,\r\n      `Event handlers receive an event object that contains information about the event (like target, type, etc.).`,\r\n      `To prevent the default behavior of an event (like form submission or link click), use event.preventDefault().`,\r\n    ],\r\n    contentCodeBlock: `function ButtonComponent() {\r\n  const handleClick = () => {\r\n    alert(\"Button Clicked!\");\r\n}\r\n\r\nreturn <button onClick={handleClick}>Click Me</button>;\r\n}`,\r\n  },\r\n  {\r\n    contentName: \"a. Event Object in React\",\r\n    contentList: [\r\n      `The event object contains information about the event like target, type, key, etc.`,\r\n      `It is automatically passed to the event handler function when an event occurs.`,\r\n      `You can access event properties like event.target.value, event.type, event.key, etc.`,\r\n      `The event object can be used to prevent the default behavior of an event using event.preventDefault().`,\r\n    ],\r\n    padLeft: true,\r\n  },\r\n  {\r\n    contentName: \"b. Preventing Default Behavior\",\r\n    contentList: [\r\n      `To prevent the default behavior of an event (like form submission which causes a page reload, or link click which navigates to a new page), use event.preventDefault().`,\r\n      `It stops the default action of the event from occurring.`,\r\n      `Preventing default behavior is useful for handling form submissions, link clicks, and other user interactions.`,\r\n    ],\r\n    padLeft: true,\r\n    contentCodeBlock: `function FormComponent() {\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    alert(\"Form Submitted!\");\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input type=\"text\" />\r\n      <button type=\"submit\">Submit</button>\r\n    </form>\r\n  );\r\n}`,\r\n  },\r\n  {\r\n    contentName: \"c. Synthetic Events in React\",\r\n    contentList: [\r\n      `A SyntheticEvent is React’s wrapper around native browser events that ensures cross-browser compatibility and performance optimization.`,\r\n      `Synthetic events are similar to native events but have some differences like event pooling, asynchronous behavior, and automatic cleanup.`,\r\n      `They are automatically cleaned up after the event handler has finished, preventing memory leaks.`,\r\n      `Synthetic events are used to handle events in React components and provide a consistent interface across different browsers.`,\r\n      `Event pooling is a technique used by React to reuse event objects, improving performance and reducing memory usage.`,\r\n      `Events when used in setTimeout or asynchronous functions, the event object may be null or undefined due to the asynchronous nature of React.`,\r\n      `To `\r\n    ]\r\n  },\r\n  {\r\n    contentName: \"3. Conditional Rendering in React\",\r\n    contentList: [\r\n      `Conditional rendering is used to show or hide elements based on a condition in React components.`,\r\n      `You can use JavaScript expressions like if-else, ternary operators, and logical && or || operators for conditional rendering.`,\r\n      `Common use cases for conditional rendering include showing loading spinners, error messages, or rendering components based on user authentication.`,\r\n      `Conditional rendering helps in creating dynamic and interactive user interfaces in React applications.`,\r\n    ],\r\n    contentCodeBlock: `function DataComponent() {\r\n  return <div>Data Loaded!</div>;\r\n}\r\n\r\nfunction Spinner() {\r\n  return <div>Loading...</div>;\r\n}\r\n\r\nfunction Error({ message }) {\r\n  return <div>Error: {message}</div>;\r\n}\r\n\r\n// Using Ternary Operator\r\nreturn isLoading ? <Spinner /> : <DataComponent />;\r\n\r\n// Using Logical && Operator\r\nreturn error && <Error message={error} />;\r\n\r\n// Using If-Else Statement\r\nif (isLoading) {\r\n  return <Spinner />;\r\n} else if (error) {\r\n  return <Error message={error} />;\r\n} else {\r\n  return <DataComponent />;\r\n}`,\r\n  },\r\n];\r\n\r\n\r\nconst reactPortals = [\r\n  {\r\n    contentName: \"1. Portals in React\",\r\n    contentList: [\r\n      `Portals in React provide a way to render children outside the DOM hierarchy of the parent component.`,\r\n      `They allow rendering components into a different part of the DOM, like modals, popovers, tooltips, or overlays.`,\r\n      `Portals help in creating UI components that need to break out of the parent container or have z-index stacking issues.`,\r\n      `Portals are useful for creating overlays, modals, tooltips, and other components that need to be rendered outside the normal flow of the DOM.`,\r\n    ],\r\n    contentCodeBlock: `function Modal({ children }) {\r\n  return ReactDOM.createPortal(\r\n    children,\r\n    document.getElementById(\"modal-root\")\r\n  );\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <h1>App Content</h1>\r\n      <Modal>\r\n        <p>Modal Content</p>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}`,\r\n  },\r\n  {\r\n    contentName: \"a. How Portals work?\",\r\n    contentList: [\r\n      `Portals use ReactDOM.createPortal() to render children into a different part of the DOM.`,\r\n      `The createPortal() function takes two arguments: the children to render and the DOM element to render them into.`,\r\n      `The children are rendered outside the normal DOM hierarchy of the parent component, allowing them to break out of the parent container.`,\r\n      `Real time examples: payment modals, tooltips, popovers, lightboxes, etc.`,\r\n    ],\r\n    padLeft: true,\r\n  }\r\n]\r\n\r\nexport { reactConcepts, reactComponents, reactProps, reactListsAndKeys };\r\n","import { isPlainObject } from '@mui/utils/deepmerge';\nimport defaultSxConfig from \"./defaultSxConfig.js\";\nconst splitProps = props => {\n  const result = {\n    systemProps: {},\n    otherProps: {}\n  };\n  const config = props?.theme?.unstable_sxConfig ?? defaultSxConfig;\n  Object.keys(props).forEach(prop => {\n    if (config[prop]) {\n      result.systemProps[prop] = props[prop];\n    } else {\n      result.otherProps[prop] = props[prop];\n    }\n  });\n  return result;\n};\nexport default function extendSxProp(props) {\n  const {\n    sx: inSx,\n    ...other\n  } = props;\n  const {\n    systemProps,\n    otherProps\n  } = splitProps(other);\n  let finalSx;\n  if (Array.isArray(inSx)) {\n    finalSx = [systemProps, ...inSx];\n  } else if (typeof inSx === 'function') {\n    finalSx = (...args) => {\n      const result = inSx(...args);\n      if (!isPlainObject(result)) {\n        return systemProps;\n      }\n      return {\n        ...systemProps,\n        ...result\n      };\n    };\n  } else {\n    finalSx = {\n      ...systemProps,\n      ...inSx\n    };\n  }\n  return {\n    ...otherProps,\n    sx: finalSx\n  };\n}","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nconst boxClasses = generateUtilityClasses('MuiBox', ['root']);\nexport default boxClasses;","'use client';\n\nimport { createBox } from '@mui/system';\nimport PropTypes from 'prop-types';\nimport { unstable_ClassNameGenerator as ClassNameGenerator } from \"../className/index.js\";\nimport { createTheme } from \"../styles/index.js\";\nimport THEME_ID from \"../styles/identifier.js\";\nimport boxClasses from \"./boxClasses.js\";\nconst defaultTheme = createTheme();\nconst Box = createBox({\n  themeId: THEME_ID,\n  defaultTheme,\n  defaultClassName: boxClasses.root,\n  generateClassName: ClassNameGenerator.generate\n});\nprocess.env.NODE_ENV !== \"production\" ? Box.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Box;","'use client';\n\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport styled from '@mui/styled-engine';\nimport styleFunctionSx, { extendSxProp } from \"../styleFunctionSx/index.js\";\nimport useTheme from \"../useTheme/index.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function createBox(options = {}) {\n  const {\n    themeId,\n    defaultTheme,\n    defaultClassName = 'MuiBox-root',\n    generateClassName\n  } = options;\n  const BoxRoot = styled('div', {\n    shouldForwardProp: prop => prop !== 'theme' && prop !== 'sx' && prop !== 'as'\n  })(styleFunctionSx);\n  const Box = /*#__PURE__*/React.forwardRef(function Box(inProps, ref) {\n    const theme = useTheme(defaultTheme);\n    const {\n      className,\n      component = 'div',\n      ...other\n    } = extendSxProp(inProps);\n    return /*#__PURE__*/_jsx(BoxRoot, {\n      as: component,\n      ref: ref,\n      className: clsx(className, generateClassName ? generateClassName(defaultClassName) : defaultClassName),\n      theme: themeId ? theme[themeId] || theme : theme,\n      ...other\n    });\n  });\n  return Box;\n}","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getSvgIconUtilityClass(slot) {\n  return generateUtilityClass('MuiSvgIcon', slot);\n}\nconst svgIconClasses = generateUtilityClasses('MuiSvgIcon', ['root', 'colorPrimary', 'colorSecondary', 'colorAction', 'colorError', 'colorDisabled', 'fontSizeInherit', 'fontSizeSmall', 'fontSizeMedium', 'fontSizeLarge']);\nexport default svgIconClasses;","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport capitalize from \"../utils/capitalize.js\";\nimport { styled } from \"../zero-styled/index.js\";\nimport memoTheme from \"../utils/memoTheme.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport { getSvgIconUtilityClass } from \"./svgIconClasses.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    color,\n    fontSize,\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root', color !== 'inherit' && `color${capitalize(color)}`, `fontSize${capitalize(fontSize)}`]\n  };\n  return composeClasses(slots, getSvgIconUtilityClass, classes);\n};\nconst SvgIconRoot = styled('svg', {\n  name: 'MuiSvgIcon',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, ownerState.color !== 'inherit' && styles[`color${capitalize(ownerState.color)}`], styles[`fontSize${capitalize(ownerState.fontSize)}`]];\n  }\n})(memoTheme(({\n  theme\n}) => ({\n  userSelect: 'none',\n  width: '1em',\n  height: '1em',\n  display: 'inline-block',\n  flexShrink: 0,\n  transition: theme.transitions?.create?.('fill', {\n    duration: (theme.vars ?? theme).transitions?.duration?.shorter\n  }),\n  variants: [{\n    props: props => !props.hasSvgAsChild,\n    style: {\n      // the <svg> will define the property that has `currentColor`\n      // for example heroicons uses fill=\"none\" and stroke=\"currentColor\"\n      fill: 'currentColor'\n    }\n  }, {\n    props: {\n      fontSize: 'inherit'\n    },\n    style: {\n      fontSize: 'inherit'\n    }\n  }, {\n    props: {\n      fontSize: 'small'\n    },\n    style: {\n      fontSize: theme.typography?.pxToRem?.(20) || '1.25rem'\n    }\n  }, {\n    props: {\n      fontSize: 'medium'\n    },\n    style: {\n      fontSize: theme.typography?.pxToRem?.(24) || '1.5rem'\n    }\n  }, {\n    props: {\n      fontSize: 'large'\n    },\n    style: {\n      fontSize: theme.typography?.pxToRem?.(35) || '2.1875rem'\n    }\n  },\n  // TODO v5 deprecate color prop, v6 remove for sx\n  ...Object.entries((theme.vars ?? theme).palette).filter(([, value]) => value && value.main).map(([color]) => ({\n    props: {\n      color\n    },\n    style: {\n      color: (theme.vars ?? theme).palette?.[color]?.main\n    }\n  })), {\n    props: {\n      color: 'action'\n    },\n    style: {\n      color: (theme.vars ?? theme).palette?.action?.active\n    }\n  }, {\n    props: {\n      color: 'disabled'\n    },\n    style: {\n      color: (theme.vars ?? theme).palette?.action?.disabled\n    }\n  }, {\n    props: {\n      color: 'inherit'\n    },\n    style: {\n      color: undefined\n    }\n  }]\n})));\nconst SvgIcon = /*#__PURE__*/React.forwardRef(function SvgIcon(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiSvgIcon'\n  });\n  const {\n    children,\n    className,\n    color = 'inherit',\n    component = 'svg',\n    fontSize = 'medium',\n    htmlColor,\n    inheritViewBox = false,\n    titleAccess,\n    viewBox = '0 0 24 24',\n    ...other\n  } = props;\n  const hasSvgAsChild = /*#__PURE__*/React.isValidElement(children) && children.type === 'svg';\n  const ownerState = {\n    ...props,\n    color,\n    component,\n    fontSize,\n    instanceFontSize: inProps.fontSize,\n    inheritViewBox,\n    viewBox,\n    hasSvgAsChild\n  };\n  const more = {};\n  if (!inheritViewBox) {\n    more.viewBox = viewBox;\n  }\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsxs(SvgIconRoot, {\n    as: component,\n    className: clsx(classes.root, className),\n    focusable: \"false\",\n    color: htmlColor,\n    \"aria-hidden\": titleAccess ? undefined : true,\n    role: titleAccess ? 'img' : undefined,\n    ref: ref,\n    ...more,\n    ...other,\n    ...(hasSvgAsChild && children.props),\n    ownerState: ownerState,\n    children: [hasSvgAsChild ? children.props.children : children, titleAccess ? /*#__PURE__*/_jsx(\"title\", {\n      children: titleAccess\n    }) : null]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? SvgIcon.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * Node passed into the SVG element.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).\n   * You can use the `htmlColor` prop to apply a color attribute to the SVG element.\n   * @default 'inherit'\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['inherit', 'action', 'disabled', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.\n   * @default 'medium'\n   */\n  fontSize: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['inherit', 'large', 'medium', 'small']), PropTypes.string]),\n  /**\n   * Applies a color attribute to the SVG element.\n   */\n  htmlColor: PropTypes.string,\n  /**\n   * If `true`, the root node will inherit the custom `component`'s viewBox and the `viewBox`\n   * prop will be ignored.\n   * Useful when you want to reference a custom `component` and have `SvgIcon` pass that\n   * `component`'s viewBox to the root node.\n   * @default false\n   */\n  inheritViewBox: PropTypes.bool,\n  /**\n   * The shape-rendering attribute. The behavior of the different options is described on the\n   * [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering).\n   * If you are having issues with blurry icons you should investigate this prop.\n   */\n  shapeRendering: PropTypes.string,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * Provides a human-readable title for the element that contains it.\n   * https://www.w3.org/TR/SVG-access/#Equivalent\n   */\n  titleAccess: PropTypes.string,\n  /**\n   * Allows you to redefine what the coordinates without units mean inside an SVG element.\n   * For example, if the SVG element is 500 (width) by 200 (height),\n   * and you pass viewBox=\"0 0 50 20\",\n   * this means that the coordinates inside the SVG will go from the top left corner (0,0)\n   * to bottom right (50,20) and each unit will be worth 10px.\n   * @default '0 0 24 24'\n   */\n  viewBox: PropTypes.string\n} : void 0;\nSvgIcon.muiName = 'SvgIcon';\nexport default SvgIcon;","'use client';\n\nimport * as React from 'react';\nimport SvgIcon from \"../SvgIcon/index.js\";\n\n/**\n * Private module reserved for @mui packages.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function createSvgIcon(path, displayName) {\n  function Component(props, ref) {\n    return /*#__PURE__*/_jsx(SvgIcon, {\n      \"data-testid\": `${displayName}Icon`,\n      ref: ref,\n      ...props,\n      children: path\n    });\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    // Need to set `displayName` on the inner component for React.memo.\n    // React prior to 16.14 ignores `displayName` on the wrapper.\n    Component.displayName = `${displayName}Icon`;\n  }\n  Component.muiName = SvgIcon.muiName;\n  return /*#__PURE__*/React.memo(/*#__PURE__*/React.forwardRef(Component));\n}","'use client';\n\nimport * as React from 'react';\nimport { ThemeContext } from '@mui/styled-engine';\nfunction isObjectEmpty(obj) {\n  return Object.keys(obj).length === 0;\n}\nfunction useTheme(defaultTheme = null) {\n  const contextTheme = React.useContext(ThemeContext);\n  return !contextTheme || isObjectEmpty(contextTheme) ? defaultTheme : contextTheme;\n}\nexport default useTheme;","'use client';\n\nimport createTheme from \"../createTheme/index.js\";\nimport useThemeWithoutDefault from \"../useThemeWithoutDefault/index.js\";\nexport const systemDefaultTheme = createTheme();\nfunction useTheme(defaultTheme = systemDefaultTheme) {\n  return useThemeWithoutDefault(defaultTheme);\n}\nexport default useTheme;"],"names":["props","handleClick","styles","children","disabled","_jsx","Button","sx","background","border","color","textTransform","fontWeight","opacity","onClick","createSvgIcon","d","_ref","conceptData","topic","subTopics","displayContentIndex","setDisplayContentIndex","useState","handleBack","handleNext","window","scrollTo","handlePrevious","_jsxs","_Fragment","renderSubContent","topicName","detailedList","Box","display","alignItems","ArrowBack","mr","cursor","className","map","content","index","_content$contentList","_content$contentTable","_content$contentTable2","pl","padLeft","contentName","contentList","item","ind","dangerouslySetInnerHTML","__html","contentTable","headers","header","rows","row","cell","i","contentCodeBlock","mt","justifyContent","gap","CommonButton","length","handleDisplayContent","reactCoreList","reactConcepts","reactComponents","reactProps","reactListsAndKeys","CoreReact","ContentRenderer","extendSxProp","inSx","other","systemProps","otherProps","result","config","theme","unstable_sxConfig","defaultSxConfig","Object","keys","forEach","prop","splitProps","finalSx","Array","isArray","arguments","isPlainObject","generateUtilityClasses","defaultTheme","createTheme","options","undefined","themeId","defaultClassName","generateClassName","BoxRoot","styled","shouldForwardProp","styleFunctionSx","React","inProps","ref","useTheme","component","as","clsx","createBox","THEME_ID","boxClasses","root","ClassNameGenerator","generate","getSvgIconUtilityClass","slot","generateUtilityClass","SvgIconRoot","name","overridesResolver","ownerState","capitalize","fontSize","memoTheme","userSelect","width","height","flexShrink","transition","transitions","create","duration","vars","shorter","variants","hasSvgAsChild","style","fill","typography","pxToRem","entries","palette","filter","_ref2","value","main","_ref3","action","active","SvgIcon","useDefaultProps","htmlColor","inheritViewBox","titleAccess","viewBox","type","instanceFontSize","more","classes","slots","composeClasses","useUtilityClasses","focusable","role","muiName","path","displayName","Component","contextTheme","ThemeContext","obj","systemDefaultTheme","useThemeWithoutDefault"],"sourceRoot":""}