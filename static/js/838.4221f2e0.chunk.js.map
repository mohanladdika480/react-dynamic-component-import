{"version":3,"file":"static/js/838.4221f2e0.chunk.js","mappings":"sLAGA,MAoDA,EApDwBA,IAAsB,IAArB,YAAEC,GAAaD,EAEtC,OACEE,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,SACc,OAAXH,QAAW,IAAXA,OAAW,EAAXA,EAAaI,KAAI,CAACC,EAASC,KAAK,IAAAC,EAAA,OAC/BC,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAAaC,GAAI,CAAEC,GAAIN,EAAQO,QAAU,EAAI,GAAIT,SAAA,EACnDF,EAAAA,EAAAA,KAAA,MAAAE,SAAKE,EAAQQ,cACZR,EAAQL,cACPC,EAAAA,EAAAA,KAAA,MAAIa,UAAU,qBAAoBX,SACZ,QADYI,EAC/BF,EAAQL,mBAAW,IAAAO,OAAA,EAAnBA,EAAqBH,KAAI,CAACW,EAAMC,KAC/Bf,EAAAA,EAAAA,KAAA,MACEgB,wBAAyB,CAAEC,OAAQH,IAC9B,GAAGV,EAAQQ,eAAeG,SAKtCX,EAAQc,gBACPlB,EAAAA,EAAAA,KAACQ,EAAAA,EAAG,CAACK,UAAU,wBAAuBX,UACpCK,EAAAA,EAAAA,MAAA,SAAAL,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,UACEF,EAAAA,EAAAA,KAAA,MAAAE,SACGE,EAAQc,cAAcC,QAAQhB,KAAI,CAACiB,EAAQL,KAC1Cf,EAAAA,EAAAA,KAAA,MAAAE,SAA2CkB,GAAlC,GAAGhB,EAAQQ,eAAeG,YAIzCf,EAAAA,EAAAA,KAAA,SAAAE,SACGE,EAAQc,cAAcG,KAAKlB,KAAI,CAACmB,EAAKP,KACpCf,EAAAA,EAAAA,KAAA,MAAAE,SACGoB,EAAInB,KAAI,CAACoB,EAAMC,KACdxB,EAAAA,EAAAA,KAAA,MAAAE,SACGqB,GADM,GAAGnB,EAAQQ,eAAeG,KAAOS,QAFrC,GAAGpB,EAAQQ,eAAeG,cAY5CX,EAAQqB,mBACPzB,EAAAA,EAAAA,KAAA,OAAAE,UACEF,EAAAA,EAAAA,KAAA,QAAAE,SAAOE,EAAQqB,uBAtCXpB,EAyCJ,KAEP,C,8EChDP,MAAMqB,EAAgB,CACpB,CACEd,YAAa,WACbb,YAAa,CACX,gIACA,8CACA,sFAGJ,CACEa,YAAa,gBACbb,YAAa,CACX,mJACA,uJACA,wJACA,mKACA,iIACA,0IAEFY,SAAS,GAEX,CACEC,YAAa,iBACbb,YAAa,CACX,gKACA,wIACA,mJACA,wJACA,uJAEFY,SAAS,GAEX,CACEC,YAAa,0BACbb,YAAa,CACX,2GACA,wEACA,yEAGJ,CACEa,YAAa,gBACbb,YAAa,CACX,6HACA,8HACA,mIAEFY,SAAS,GAEX,CACEC,YAAa,oBACbb,YAAa,CACX,2GACA,uFACA,uEAEFY,SAAS,GAEX,CACEC,YAAa,iBACbb,YAAa,CACX,oFACA,yFACA,2EAGJ,CACEa,YAAa,4BACbb,YAAa,CACX,4QAGJ,CACEa,YAAa,4DACbb,YAAa,CACX,gHACA,gKACA,wKAEF0B,iBAAkB,q2BA+BlBd,SAAS,GAEX,CACEC,YAAa,2CACbM,cAAe,CACbC,QAAS,CAAC,WAAY,cAAe,WAAY,cACjDE,KAAM,CACJ,CACE,aACA,kHACA,wEACA,yHAEF,CACE,cACA,mDACA,sFACA,qFAEF,CACE,YACA,wEACA,sDACA,0EAEF,CACE,eACA,sFACA,sEACA,iEAEF,CACE,WACA,gEACA,yEACA,+DAiDV,EARkBM,KAEd3B,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACEF,EAAAA,EAAAA,KAAC4B,EAAAA,QAAe,CAAC7B,YAAa2B,K","sources":["components/Common/ContentRenderer.js","components/React/CoreReact/CoreReact.js"],"sourcesContent":["import React from \"react\";\r\nimport { Box } from \"@mui/material\";\r\n\r\nconst ContentRenderer = ({ contentList }) => {\r\n\r\n  return (\r\n    <>\r\n      {contentList?.map((content, index) => (\r\n        <Box key={index} sx={{ pl: content.padLeft ? 4 : 0 }}>\r\n          <h2>{content.contentName}</h2>\r\n          {content.contentList && (\r\n            <ul className=\"list_style_content\">\r\n              {content.contentList?.map((item, ind) => (\r\n                <li\r\n                  dangerouslySetInnerHTML={{ __html: item }}\r\n                  key={`${content.contentName}_${ind}`}\r\n                />\r\n              ))}\r\n            </ul>\r\n          )}\r\n          {content.constentTable && (\r\n            <Box className=\"scrollbar_auto_styles\">\r\n              <table>\r\n                <thead>\r\n                  <tr>\r\n                    {content.constentTable.headers.map((header, ind) => (\r\n                      <th key={`${content.contentName}_${ind}`}>{header}</th>\r\n                    ))}\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {content.constentTable.rows.map((row, ind) => (\r\n                    <tr key={`${content.contentName}_${ind}`}>\r\n                      {row.map((cell, i) => (\r\n                        <td key={`${content.contentName}_${ind}_${i}`}>\r\n                          {cell}\r\n                        </td>\r\n                      ))}\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </Box>\r\n          )}\r\n          {content.contentCodeBlock && (\r\n            <pre>\r\n              <code>{content.contentCodeBlock}</code>\r\n            </pre>\r\n          )}\r\n        </Box>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContentRenderer;\r\n","import React from \"react\";\r\nimport ContentRenderer from \"../../Common/ContentRenderer\";\r\n\r\nconst reactConcepts = [\r\n  {\r\n    contentName: \"1. React\",\r\n    contentList: [\r\n      `It is a JavaScript library for building fast, interactive, and scalable user interfaces (UI), primarily for web applications.`,\r\n      `It is declarative, efficient, and flexible.`,\r\n      `It is component-based, meaning the UI is split into independent, reusable pieces.`,\r\n    ],\r\n  },\r\n  {\r\n    contentName: \"a. Advantages\",\r\n    contentList: [\r\n      `<span class=\"semibold_italic\">Component-Based Architecture →</span> Reusable components make development faster and code more maintainable.`,\r\n      `<span class=\"semibold_italic\">Fast Rendering with Virtual DOM →</span> React updates only the necessary parts of the UI, improving performance.`,\r\n      `<span class=\"semibold_italic\">Unidirectional Data Flow →</span> Ensures predictable state management, reducing bugs and making debugging easier.`,\r\n      `<span class=\"semibold_italic\">Rich Ecosystem & Community Support →</span> Huge open-source support with libraries like Redux, React Query, and Material UI.`,\r\n      `<span class=\"semibold_italic\">Easy to Learn & Use →</span> JSX simplifies UI development, making React beginner-friendly.`,\r\n      `<span class=\"semibold_italic\">Cross-Platform Development →</span> React Native allows code reuse for mobile apps (iOS & Android).`,\r\n    ],\r\n    padLeft: true,\r\n  },\r\n  {\r\n    contentName: \"b. Limitations\",\r\n    contentList: [\r\n      `<span class=\"semibold_italic\">Not a Full Framework:</span> Only handles UI, needs React Router for navigation, Redux/Context API for state, API handling etc.`,\r\n      `<span class=\"semibold_italic\">SEO Issues:</span> React uses client-side rendering, which can hurt SEO. Solution: Use Next.js for SSR.`,\r\n      `<span class=\"semibold_italic\">Frequent Updates:</span> React evolves quickly (e.g., Class Components → Hooks), requiring constant learning.`,\r\n      `<span class=\"semibold_italic\">Prop Drilling & Complex State:</span> Passing data deep in components is painful; needs Context API, Redux, or Zustand.`,\r\n      `<span class=\"semibold_italic\">Not Ideal for Small/Static Apps:</span> Lightweight alternatives like Svelte, Vue, or Astro are better in some cases.`,\r\n    ],\r\n    padLeft: true,\r\n  },\r\n  {\r\n    contentName: \"2. JSX (JavaScript XML)\",\r\n    contentList: [\r\n      `It is a syntax extension for JavaScript, similar to XML/HTML, used with React to describe UI components.`,\r\n      `It allows writing HTML in React and JavaScript code in the same file.`,\r\n      `It is not a necessity but a convention for writing React components.`,\r\n    ],\r\n  },\r\n  {\r\n    contentName: \"a. Advantages\",\r\n    contentList: [\r\n      `<span class=\"semibold_italic\">Easy to Write & Read:</span> Combines HTML & JS, making code more readable and maintainable.`,\r\n      `<span class=\"semibold_italic\">Prevents Injection Attacks:</span> Automatically escapes user inputs, preventing XSS attacks.`,\r\n      `<span class=\"semibold_italic\">Faster Development:</span> Reduces context switching between HTML and JS, improving productivity.`,\r\n    ],\r\n    padLeft: true,\r\n  },\r\n  {\r\n    contentName: \"b. How JSX works?\",\r\n    contentList: [\r\n      `JSX is transpiled to JavaScript using Babel, converting HTML-like syntax to React.createElement() calls.`,\r\n      `React.createElement() creates a virtual DOM object (React Element) for each JSX tag.`,\r\n      `React then updates the actual DOM based on the virtual DOM changes.`,\r\n    ],\r\n    padLeft: true,\r\n  },\r\n  {\r\n    contentName: \"3. Virtual DOM\",\r\n    contentList: [\r\n      `It is a lightweight copy of the actual DOM, used by React to improve performance.`,\r\n      `React compares the virtual DOM with the actual DOM and updates only the changed parts.`,\r\n      `It reduces the number of DOM manipulations, improving rendering speed.`,\r\n    ],\r\n  },\r\n  {\r\n    contentName: \"4. Reconciliation Process\",\r\n    contentList: [\r\n      `It is is the process React uses to update the Real DOM efficiently when the state or props of a component change. Instead of re-rendering the entire UI, React compares the new Virtual DOM with the previous one and updates only the changed parts in the actual DOM.`,\r\n    ],\r\n  },\r\n  {\r\n    contentName: \"a. How Virtual DOM Updates work? (Reconciliation Process)\",\r\n    contentList: [\r\n      `<span class=\"semibold_italic\">Render Phase:</span> When the UI changes, React creates a new virtual DOM tree.`,\r\n      `<span class=\"semibold_italic\">Diffing Phase:</span> React compares the new virtual DOM with the previous one using the diffing algorithm to find the changes.`,\r\n      `<span class=\"semibold_italic\">Reconciliation Phase:</span> Instead of updating the actual DOM directly, React updates only the changed parts, improving performance.`,\r\n    ],\r\n    contentCodeBlock: `function TextUpdater() {\r\n  const [text, setText] = useState(\"Hello, world!\");\r\n\r\n  const updateText = () => {\r\n    setText(\"Hello, React!\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <p>{text}</p>\r\n      <button onClick={updateText}>Change Text</button>\r\n    </div>\r\n  );\r\n}\r\n\r\n/*\r\n  How This Works (Step-by-Step)\r\n\r\n  1. Initial Render:\r\n     - React creates a Virtual DOM for the component with <p>Hello, world!</p>.\r\n\r\n  2. State Update (onClick Event):\r\n     - The button is clicked, updating the state to \"Hello, React!\".\r\n     - A new Virtual DOM tree is created with <p>Hello, React!</p>.\r\n\r\n  3. Diffing (Comparing Old vs. New Virtual DOM):\r\n     - React detects that only the text inside <p> has changed.\r\n\r\n  4. Reconciliation (Efficient Update to Real DOM):\r\n     - Instead of re-rendering the entire <p> element, React updates only the text node inside.\r\n*/`,\r\n    padLeft: true,\r\n  },\r\n  {\r\n    contentName: \"5. Difference with Real DOM & Shadow DOM\",\r\n    constentTable: {\r\n      headers: [\"Features\", \"Virtual DOM\", \"Real DOM\", \"Shadow DOM\"],\r\n      rows: [\r\n        [\r\n          \"Definition\",\r\n          \"A lightweight copy of the Real DOM used by React to track the changes efficiently before updating the Real DOM.\",\r\n          \"The actual browser-rendered HTML structure that users interact with. \",\r\n          \"A separate, encapsulated DOM inside an element (mostly used in Web Components) to prevent style and script conflicts.\",\r\n        ],\r\n        [\r\n          \"Performance\",\r\n          \"Faster updates due to minimal DOM manipulations.\",\r\n          \"Slower updates as it directly interacts with the browser and whole repaints happen.\",\r\n          \"Improves performance by keeping styles and elements scoped to a single component.\",\r\n        ],\r\n        [\r\n          \"Rendering\",\r\n          \"Creates a virtual tree of React elements that mirrors the actual DOM.\",\r\n          \"Directly renders the HTML structure on the browser.\",\r\n          \"Renders the DOM inside a shadow root, isolated from the main document.\",\r\n        ],\r\n        [\r\n          \"Manipulation\",\r\n          \"React compares old and new VDOM, updating only the necessary parts in the Real DOM.\",\r\n          \"Any change directly affects the page, causing a reflow and repaint.\",\r\n          \"Elements inside a Shadow DOM are independent of the main DOM.\",\r\n        ],\r\n        [\r\n          \"Use Case\",\r\n          \"React uses VDOM to improve performance and reduce re-renders.\",\r\n          \"Traditional websites and applications that don’t use a framework.\",\r\n          \"Web Components that need encapsulation and reusability.\",\r\n        ]\r\n      ],\r\n    },\r\n  },\r\n];\r\n\r\nconst reactComponents = [\r\n  {\r\n    contentName: \"1. Functional Components\",\r\n    contentList: [\r\n      `Simple JavaScript functions that return JSX elements.`,\r\n      `Introduced in React 16.8 as an alternative to Class Components.`,\r\n      `Use hooks like useState, useEffect, useContext, etc., for state and side effects.`,\r\n    ],\r\n  },\r\n  {\r\n    contentName: \"a. Syntax\",\r\n    contentCodeBlock: `const Greet = ({ name }) => {\r\n  return <h1>Hello, {name}!</h1>;\r\n};`,\r\n  },\r\n  {\r\n    contentName: \"b. Advantages\",\r\n    contentList: [\r\n      `Easier to read and write compared to Class Components.`,\r\n      `Promotes functional programming and code reusability.`,\r\n      `Better performance due to less boilerplate code.`,\r\n    ],\r\n    padLeft: true,\r\n  },\r\n  {\r\n    contentName: \"2. Class Components\",\r\n    contentList: [\r\n      `ES6 classes that extend React.Component.`,\r\n      `Introduced in React 0.13 as the primary way to create components.`,\r\n      `Use lifecycle methods like componentDidMount, componentDidUpdate, etc., for state and side effects.`,\r\n    ],\r\n  },\r\n]\r\n\r\nconst CoreReact = () => {\r\n  return (\r\n    <>\r\n      <ContentRenderer contentList={reactConcepts} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CoreReact;\r\n"],"names":["_ref","contentList","_jsx","_Fragment","children","map","content","index","_content$contentList","_jsxs","Box","sx","pl","padLeft","contentName","className","item","ind","dangerouslySetInnerHTML","__html","constentTable","headers","header","rows","row","cell","i","contentCodeBlock","reactConcepts","CoreReact","ContentRenderer"],"sourceRoot":""}